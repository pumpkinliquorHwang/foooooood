<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="pay">
<resultMap id="payMap" type="map"></resultMap>
<select id="pay" parameterType='map' resultMap="payMap">
	select memberId,(select deliveryPrice from store where businesscode=38) as DELIVERYPRICE,(select storeName from store where businesscode=#{businessCode}) as STORENAME, memberPhone, (select sum(plusMenuPrice) from wishList b where memberId=b.memberId AND b.memberId=#{memberId})as totalPrice from member where memberId=#{memberId}
</select>
<select id="payWishList" parameterType="map" resultMap="payMap">
	SELECT * FROM WISHLIST B INNER JOIN MENU A ON A.menucode=B.menucode WHERE B.businessCode=#{businessCode} AND B.memberId=#{memberId}
</select>

<insert id="payEnd">

</insert>

<select id="selectWishList" resultType="map" parameterType="string">
	 select w.*,m.membernum,me.menuname from wishlist w join member m on(w.memberId = m.memberId) join menu me on(w.menucode = me.menucode) where w.memberId = #{memberId}
    
</select>

<insert id="insertPay" parameterType="map">
	insert into pay values(seq_paycode.nextval,#{businessCode},SYSDATE+9/24,#{menuCode},null,null,null,#{price},#{count},#{memberNum},'신용카드',#{payRequest},seq_payOrderNum.nextval,default,#{payAddress},#{impUid},#{deliveryPay})
</insert>
<insert id="insertPay2" parameterType="map">
	insert into pay values(seq_paycode.nextval,#{businessCode},SYSDATE+9/24,#{menuCode},null,null,null,#{price},#{count},#{memberNum},'신용카드',#{payRequest},seq_payOrderNum.currval,default,#{payAddress},#{impUid},#{deliveryPay})
</insert>

<update id="menuSoldCount" parameterType="map">
	UPDATE MENU SET MENUSOLDCOUNT=MENUSOLDCOUNT+#{count} WHERE MENUCODE=#{menuCode}
</update>


<delete id="deleteWishList" parameterType="String">
delete from wishlist where memberId=#{memberId}
</delete>

<select id="selectOnePay" parameterType="string" resultType="map">
	select p.*,m.menuname,s.storename from (select * from pay order by paydate desc) p join menu m on(p.menucode = m.menucode) join store s on(p.businesscode = s.businesscode) where rownum = 1 AND memberNum=(select memberNum from member where memberid=#{memberId})
</select>

<!-- 거리 구하기 -->
<select id="selectDistance" parameterType="map" resultType="_int">
	SELECT distance
		FROM 
		(
    		SELECT STORE.*, DISTNACE_WGS84(#{lat} - 0.0000000000009, #{lng}, atitude, longitude) AS DISTANCE
    		FROM STORE
    		WHERE (atitude between #{lat} - 0.1 and #{lat} + 0.1)
    			AND (longitude between #{lng} - 0.1 and #{lng} + 0.1)
    			AND isConfirm = 1
    			AND businessCode = #{businessCode}    			                    
    		ORDER BY DISTANCE
    	)
</select>
</mapper>